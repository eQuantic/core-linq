using System.Linq;
using System.Text;
using eQuantic.Linq.SourceGenerator.Models;

namespace eQuantic.Linq.SourceGenerator.Generators;

internal static class SortingCodeGenerator
{
    public static string Generate(ClassInfo classInfo)
    {
        var sb = new StringBuilder();
        var namespaceName = classInfo.Configuration.Namespace ?? classInfo.Namespace;

        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Linq.Expressions;");
        sb.AppendLine("using eQuantic.Linq.Sorter;");
        sb.AppendLine("using eQuantic.Linq.Sorter.Extensions;");
        sb.AppendLine();
        sb.AppendLine($"namespace {namespaceName};");
        sb.AppendLine();
        sb.AppendLine($"public partial class {classInfo.Name}");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Generated sorting for {classInfo.Name}");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    public static class Sorting");
        sb.AppendLine("    {");

        foreach (var property in classInfo.Properties.Where(p => 
            p.Configuration?.Exclude != true && 
            p.Configuration?.IncludeInSorting != false))
        {
            GeneratePropertySorting(sb, classInfo.Name, property);
        }

        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine();

        // Generate extension methods for fluent chaining
        GenerateSortingExtensions(sb, classInfo, namespaceName);

        return sb.ToString();
    }

    private static void GeneratePropertySorting(StringBuilder sb, string className, PropertyInfo property)
    {
        var propertyName = property.Name;
        var propertyType = property.Type;
        var methodName = property.Configuration?.MethodName ?? propertyName;

        sb.AppendLine($"        /// <summary>");
        sb.AppendLine($"        /// Creates a sorter for {propertyName} in the specified direction.");
        sb.AppendLine($"        /// </summary>");
        sb.AppendLine($"        public static IEntitySorter<{className}> By{methodName}(SortDirection direction = SortDirection.Ascending)");
        sb.AppendLine($"            => direction == SortDirection.Ascending");
        sb.AppendLine($"                ? EntitySorter<{className}>.OrderBy<{propertyType}>(x => x.{propertyName})");
        sb.AppendLine($"                : EntitySorter<{className}>.OrderByDescending<{propertyType}>(x => x.{propertyName});");
        sb.AppendLine();

        sb.AppendLine($"        /// <summary>");
        sb.AppendLine($"        /// Creates an ascending sorter for {propertyName}.");
        sb.AppendLine($"        /// </summary>");
        sb.AppendLine($"        public static IEntitySorter<{className}> By{methodName}Ascending()");
        sb.AppendLine($"            => EntitySorter<{className}>.OrderBy<{propertyType}>(x => x.{propertyName});");
        sb.AppendLine();

        sb.AppendLine($"        /// <summary>");
        sb.AppendLine($"        /// Creates a descending sorter for {propertyName}.");
        sb.AppendLine($"        /// </summary>");
        sb.AppendLine($"        public static IEntitySorter<{className}> By{methodName}Descending()");
        sb.AppendLine($"            => EntitySorter<{className}>.OrderByDescending<{propertyType}>(x => x.{propertyName});");
        sb.AppendLine();
    }

    private static void GenerateSortingExtensions(StringBuilder sb, ClassInfo classInfo, string namespaceName)
    {
        var className = classInfo.Name;

        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// Extension methods for fluent {className} sorting");
        sb.AppendLine("/// </summary>");
        sb.AppendLine($"public static class {className}SortingExtensions");
        sb.AppendLine("{");

        foreach (var property in classInfo.Properties.Where(p => 
            p.Configuration?.Exclude != true && 
            p.Configuration?.IncludeInSorting != false))
        {
            GeneratePropertySortingExtensions(sb, className, property);
        }

        sb.AppendLine("}");
    }

    private static void GeneratePropertySortingExtensions(StringBuilder sb, string className, PropertyInfo property)
    {
        var propertyName = property.Name;
        var propertyType = property.Type;
        var methodName = property.Configuration?.MethodName ?? propertyName;

        sb.AppendLine($"    /// <summary>");
        sb.AppendLine($"    /// Adds {propertyName} as a secondary sort criteria.");
        sb.AppendLine($"    /// </summary>");
        sb.AppendLine($"    public static IEntitySorter<{className}> ThenBy{methodName}(this IEntitySorter<{className}> sorter, SortDirection direction = SortDirection.Ascending)");
        sb.AppendLine($"        => direction == SortDirection.Ascending");
        sb.AppendLine($"            ? sorter.ThenBy<{className}, {propertyType}>(x => x.{propertyName})");
        sb.AppendLine($"            : sorter.ThenByDescending<{className}, {propertyType}>(x => x.{propertyName});");
        sb.AppendLine();

        sb.AppendLine($"    /// <summary>");
        sb.AppendLine($"    /// Adds {propertyName} as a secondary sort criteria in ascending order.");
        sb.AppendLine($"    /// </summary>");
        sb.AppendLine($"    public static IEntitySorter<{className}> ThenBy{methodName}Ascending(this IEntitySorter<{className}> sorter)");
        sb.AppendLine($"        => sorter.ThenBy<{className}, {propertyType}>(x => x.{propertyName});");
        sb.AppendLine();

        sb.AppendLine($"    /// <summary>");
        sb.AppendLine($"    /// Adds {propertyName} as a secondary sort criteria in descending order.");
        sb.AppendLine($"    /// </summary>");
        sb.AppendLine($"    public static IEntitySorter<{className}> ThenBy{methodName}Descending(this IEntitySorter<{className}> sorter)");
        sb.AppendLine($"        => sorter.ThenByDescending<{className}, {propertyType}>(x => x.{propertyName});");
        sb.AppendLine();
    }
}