# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

# All files
[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true

# Code files
[*.{cs,csx,vb,vbx}]
indent_style = space
indent_size = 4

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_style = space
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_style = space
indent_size = 2

# JSON files
[*.{json,json5,webmanifest}]
indent_style = space
indent_size = 2

# YAML files
[*.{yml,yaml}]
indent_style = space
indent_size = 2

# Markdown files
[*.{md,mdx}]
trim_trailing_whitespace = false

# Web files
[*.{htm,html,js,jsm,ts,tsx,css,sass,scss,less,pcss,svg,vue}]
indent_style = space
indent_size = 2

# Batch files
[*.{cmd,bat}]
end_of_line = crlf

# Bash files
[*.sh]
end_of_line = lf

# C# code style rules
[*.cs]
# Organize usings
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# this. preferences
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent
dotnet_style_readonly_field = true:suggestion

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion

# Modern .NET preferences
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed
dotnet_style_namespace_match_folder = true:suggestion
dotnet_style_allow_multiple_blank_lines_experimental = false:silent
dotnet_style_allow_statement_immediately_after_block_experimental = true:silent

# C# Style Rules
# var preferences
csharp_style_var_for_built_in_types = true:silent
csharp_style_var_when_type_is_apparent = true:silent
csharp_style_var_elsewhere = true:silent

# Expression-bodied members
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = false:silent

# Pattern-matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion
csharp_style_prefer_pattern_matching = true:silent
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_extended_property_pattern = true:suggestion

# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Modern C# features (C# 8-12+)
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_prefer_utf8_string_literals = true:suggestion
csharp_style_prefer_readonly_struct = true:suggestion
csharp_style_prefer_readonly_struct_member = true:suggestion
csharp_style_allow_embedded_statements_on_same_line_experimental = true:silent
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true:silent
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true:silent

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# Expression-level preferences
csharp_prefer_braces = true:silent
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion

# C# formatting rules
# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true

# Code Analysis Rules
dotnet_analyzer_diagnostic.category-design.severity = suggestion
dotnet_analyzer_diagnostic.category-performance.severity = warning
dotnet_analyzer_diagnostic.category-reliability.severity = warning
dotnet_analyzer_diagnostic.category-security.severity = error
dotnet_analyzer_diagnostic.category-maintainability.severity = suggestion
dotnet_analyzer_diagnostic.category-style.severity = suggestion
dotnet_analyzer_diagnostic.category-usage.severity = warning

# Specific analyzer rules for modern .NET development
dotnet_diagnostic.CA1001.severity = warning  # Types that own disposable fields should be disposable
dotnet_diagnostic.CA1009.severity = warning  # Declare event handlers correctly
dotnet_diagnostic.CA1016.severity = warning  # Mark assemblies with assembly version
dotnet_diagnostic.CA1033.severity = warning  # Interface methods should be callable by child types
dotnet_diagnostic.CA1049.severity = warning  # Types that own native resources should be disposable
dotnet_diagnostic.CA1060.severity = warning  # Move pinvokes to native methods class
dotnet_diagnostic.CA1061.severity = warning  # Do not hide base class methods
dotnet_diagnostic.CA1063.severity = warning  # Implement IDisposable Correctly
dotnet_diagnostic.CA1065.severity = warning  # Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1301.severity = warning  # Avoid duplicate accelerators
dotnet_diagnostic.CA1400.severity = warning  # P/Invoke entry points should exist
dotnet_diagnostic.CA1401.severity = warning  # P/Invokes should not be visible
dotnet_diagnostic.CA1403.severity = warning  # Auto layout types should not be COM visible
dotnet_diagnostic.CA1404.severity = warning  # Call GetLastError immediately after P/Invoke
dotnet_diagnostic.CA1405.severity = warning  # COM visible type base types should be COM visible
dotnet_diagnostic.CA1410.severity = warning  # COM registration methods should be matched
dotnet_diagnostic.CA1415.severity = warning  # Declare P/Invokes correctly
dotnet_diagnostic.CA1821.severity = warning  # Remove empty Finalizers
dotnet_diagnostic.CA1900.severity = warning  # Value type fields should be portable
dotnet_diagnostic.CA1901.severity = warning  # P/Invoke declarations should be portable
dotnet_diagnostic.CA2002.severity = warning  # Do not lock on objects with weak identity
dotnet_diagnostic.CA2100.severity = warning  # Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2101.severity = warning  # Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2108.severity = warning  # Review declarative security on value types
dotnet_diagnostic.CA2111.severity = warning  # Pointers should not be visible
dotnet_diagnostic.CA2112.severity = warning  # Secured types should not expose fields
dotnet_diagnostic.CA2114.severity = warning  # Method security should be a superset of type
dotnet_diagnostic.CA2116.severity = warning  # APTCA methods should only call APTCA methods
dotnet_diagnostic.CA2117.severity = warning  # APTCA types should only extend APTCA base types
dotnet_diagnostic.CA2122.severity = warning  # Do not indirectly expose methods with link demands
dotnet_diagnostic.CA2123.severity = warning  # Override link demands should be identical to base
dotnet_diagnostic.CA2124.severity = warning  # Wrap vulnerable finally clauses in outer try
dotnet_diagnostic.CA2126.severity = warning  # Type link demands require inheritance demands
dotnet_diagnostic.CA2131.severity = warning  # Security critical types may not participate in type equivalence
dotnet_diagnostic.CA2132.severity = warning  # Default constructors must be at least as critical as base type default constructors
dotnet_diagnostic.CA2133.severity = warning  # Delegates must bind to methods with consistent transparency
dotnet_diagnostic.CA2134.severity = warning  # Methods must keep consistent transparency when overriding base methods
dotnet_diagnostic.CA2137.severity = warning  # Transparent methods must contain only verifiable IL
dotnet_diagnostic.CA2138.severity = warning  # Transparent methods must not call methods with the SuppressUnmanagedCodeSecurity attribute
dotnet_diagnostic.CA2140.severity = warning  # Transparent code must not reference security critical items
dotnet_diagnostic.CA2141.severity = warning  # Transparent methods must not satisfy LinkDemands
dotnet_diagnostic.CA2146.severity = warning  # Types must be at least as critical as their base types and interfaces
dotnet_diagnostic.CA2147.severity = warning  # Transparent methods may not use security asserts
dotnet_diagnostic.CA2149.severity = warning  # Transparent methods must not call into native code
dotnet_diagnostic.CA2200.severity = warning  # Rethrow to preserve stack details
dotnet_diagnostic.CA2202.severity = warning  # Do not dispose objects multiple times
dotnet_diagnostic.CA2207.severity = warning  # Initialize value type static fields inline
dotnet_diagnostic.CA2212.severity = warning  # Do not mark serviced components with WebMethod
dotnet_diagnostic.CA2213.severity = warning  # Disposable fields should be disposed
dotnet_diagnostic.CA2214.severity = warning  # Do not call overridable methods in constructors
dotnet_diagnostic.CA2216.severity = warning  # Disposable types should declare finalizer
dotnet_diagnostic.CA2220.severity = warning  # Finalizers should call base class finalizer
dotnet_diagnostic.CA2229.severity = warning  # Implement serialization constructors
dotnet_diagnostic.CA2231.severity = warning  # Overload operator equals on overriding value type Equals
dotnet_diagnostic.CA2232.severity = warning  # Mark Windows Forms entry points with STAThread
dotnet_diagnostic.CA2235.severity = warning  # Mark all non-serializable fields
dotnet_diagnostic.CA2236.severity = warning  # Call base class methods on ISerializable types
dotnet_diagnostic.CA2237.severity = warning  # Mark ISerializable types with serializable
dotnet_diagnostic.CA2238.severity = warning  # Implement serialization methods correctly
dotnet_diagnostic.CA2240.severity = warning  # Implement ISerializable correctly
dotnet_diagnostic.CA2241.severity = warning  # Provide correct arguments to formatting methods
dotnet_diagnostic.CA2242.severity = warning  # Test for NaN correctly

# Modern nullable reference types
dotnet_diagnostic.CS8600.severity = warning  # Converting null literal or possible null value to non-nullable type
dotnet_diagnostic.CS8601.severity = warning  # Possible null reference assignment
dotnet_diagnostic.CS8602.severity = warning  # Dereference of a possibly null reference
dotnet_diagnostic.CS8603.severity = warning  # Possible null reference return
dotnet_diagnostic.CS8604.severity = warning  # Possible null reference argument
dotnet_diagnostic.CS8618.severity = warning  # Non-nullable field must contain a non-null value when exiting constructor
dotnet_diagnostic.CS8625.severity = warning  # Cannot convert null literal to non-nullable reference type